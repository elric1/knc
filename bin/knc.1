.\"	$Id: knc.1,v 1.6 2008/11/25 22:01:54 dowdes Exp $
.\"
.\" Copyright 2009  Morgan Stanley and Co. Incorporated
.\"
.\" Permission is hereby granted, free of charge, to any person obtaining
.\" a copy of this software and associated documentation files (the
.\" "Software"), to deal in the Software without restriction, including
.\" without limitation the rights to use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or sell copies of the Software, and to
.\" permit persons to whom the Software is furnished to do so, subject
.\" to the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be
.\" included in all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
.\" ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
.\" CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
.\" WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.Dd July 24, 2007
.Os
.Dt KNC 1
.Sh NAME
.Nm knc
.Nd kerberized netcat
.Sh SYNOPSIS
.Bl -item
.It
.Nm
.Fl l
.Op Fl n
.Op Fl d
.Op Fl a Ar bind_address
.Op Fl f
.Op Fl c Ar num
.Ar port
.Ar prog
.Op args
.Nm
.Fl il
.Op Fl n
.Op Fl d
.Ar prog
.Op args
.Nm
.Fl lS
.Ar path
.Op Fl n
.Op Fl d
.Op Fl a Ar bind_address
.Op Fl f
.Op Fl c Ar num
.Ar port
.Nm
.Fl ilS
.Ar path
.Op Fl n
.Op Fl d
.It
.Nm
.Op Fl d
.Op Fl n
.Ar service@host:port
.Nm
.Op Fl d
.Op Fl n
.Ar -N Ar fd
.Ar service@host
.El
.Sh DESCRIPTION
.Nm
provides an 8-bit clean, mutually authenticated, integrity protected,
private (encrypted) tunnel between two endpoints.
The same executable provides both client and server functionality.
.Pp
The server can operate in either "inetd" or standalone mode.  In server mode,
.Nm
either launches
.Ar prog
with arguments
.Ar args
or connects to a
.Ux
domain socket (depending on the presence of the
.Fl S
flag).
.Pp
The options are as follows:
.Bl -tag -width indentxxxxxx
.It Fl l
listener (server) mode.
.It Fl i
set "inetd" mode.
Implies
.Fl l .
If the supplied socket is listening, then
.Nm
will run as an inetd-style wait service
.Pq Fl w ,
otherwise
.Nm
will run as an inetd-style nowait service.
.It Fl n
do not use the resolver for any name look ups (no DNS mode).
.It Fl d
increment debug level (specify multiple times for increased debugging).
.It Fl a Ar bind_address
bind to address
.Ar bind_address
when in server mode (default is INADDR_ANY).
.It Fl S Ar path
connect to the named Unix domain socket upon accepting a connection rather
than launching a program.
.It Fl f
don't fork when in server mode (useful for debugging).
.It Fl c
in server mode, limit the maximum number of concurrent child processes to
.Ar num .
This defaults to 128.
.It Fl o Ar opt
allows for the setting of options.
Currently, the following options are implemented:
.Bl -tag -width no-half-closeXX
.It Ar keepalive
enables TCP keepalives.
.It Ar no-half-close
disable the half close functionality.
.It Ar noprivacy
disable encryption (but leave integrity protection).
.It Ar syslog-ident
set the ident of syslog messages instead of the default of argv[0].
.El
.It Fl w
in server mode, start as an inetd wait service.
That is, expect stdin to be a listening socket and process requests on it.
.Nm
.It Fl M Ar max
in server mode, the maximum number of connexions to process before exiting.
.It Fl N Ar fd
in client mode, do not attempt to connect to a remote host, but instead
use the supplied, pre-connected file descriptor
.Ar fd \.
The usual knc handshake
will be performed over this file descriptor.
In server mode,
.Fl N
implies
.Fl i ,
but will use the supplied file descriptor in preference to standard input.
.It Fl P Ar sprinc
in client mode, specify the Kerberos principal that we will use for the
server.
.It Fl S Ar sun_path
in server mode, connect to the UNIX domain socket specified by
.Ar sun_path
rather than run a program.
.It Fl T Ar max_time
in server mode, the maximum time to process requests.
.El
.Pp
When
.Nm
launches a program, it inserts the principal of the counter-party into
the environment variable
.Ev KNC_CREDS
as well as populating other environment variables. (See
.Sx ENVIRONMENT AND UNIX DOMAIN SOCKET PROTOCOL )
.Pp
The server connects its network side to the stdin and stdout file descriptors
of the launched program.  Any reads or writes by the launched program are
translated into reads and writes to the network side.  Likewise, reads and
writes on the network side are translated to the local side.  End of file
conditions (EOF) are similarly translated.
.Pp
Similarly, the client connects its stdin and stdout file descriptors to its
network side, translating reads and writes as above.
.Sh ENVIRONMENT AND UNIX DOMAIN SOCKET PROTOCOL
.Nm
has two distinct ways of communicating information to the server-side
process.  If
.Nm
is launching an executable, it communicates by populating the environment
of the launched program.  However, if
.Nm
is instead connecting to a Unix domain socket, it must transmit the same
information over the socket to the server process.
.Pp
For launched executables, the current environment variables are defined:
.Bl -tag -width "KNC_REMOTE_PORT" -offset indent
.It Ev KNC_CREDS
The display name of the remote counterparty.
This is only set if the mechanism is Kerberos.
.It Ev KNC_EXPORT_NAME
The hex encoded export name of the remote counterparty.
.It Ev KNC_MECH
Either "krb5" if the mechanism used was Kerberos or the hex-encoded form
of the mechanism OID.
Note: this can be blank if the GSS library doesn't supply the appropriate
functions.
.It Ev KNC_REMOTE_ADDR
This is deprecated.
Please use either
Ev KNC_REMOTE_IP ,
or
.Ev KNC_REMOTE_IP6 .
.It Ev KNC_REMOTE_IP
The IP address of the
.Nm
client program.
N.B.
.Em NO ENTITLEMENT DECISIONS
should be based on the contents of this variable.  Further, it is only the
"nearest" client to the server.  Remember that various other tunnels (including
.Nm )
may be between you and the actual user.
.It Ev KNC_REMOTE_IP6
The IPv6 address of the
.Nm
client program.
Please see the notes in
.Ev KNC_REMOTE_IP
for caveats.
.It Ev KNC_REMOTE_PORT
The source port of the client.
.It Ev KNC_VERSION
The version of the server.
This is not the version of the client as the server does not know this.
.El
.Pp
When
.Nm
instead connects to a
.Ux
domain socket, it uses the following protocol to transmit the information
contained in the environment variables:
.Bl -column "prot" -offset indent
\&Key_1:Value_1\\n
\&Key_2:Value_2\\n
\&\.\.\.
\&END\\n
.El
.Pp
These
.Em KEY:VALUE
pairs will be the very first data transmitted across the newly accepted
Unix domain socket.  Currently defined
.Em KEY Ns s
are precisely the same as the environment variables detailed above, without
the
.Ev KNC_
prefix.  (e.g.
.Em CREDS ,
.Em REMOTE_IP ,
etc.)
.Pp
The server application must parse this protocol until the
.Em END\en
indicator is seen.  The application is free to ignore any of the
.Em KEY:VALUE
pairs it sees.
.Pp
Once these have been transmitted,
.Nm
begins relaying data as normal.  No acknowledgement on the part of the
server application is required, and further, it is prohibited, as this will
be counted as part of the normal data stream.
.Sh SECURITY CONSIDERATIONS
Use of
.Nm
must be carefully considered in order to bring security benefits to your
application.  In particular, applications launched by
.Nm
which wish to trust the contents of
.Ev KNC_CREDS
must not allow themselves to be executed by any means other than
.Nm \.
One method of ensuring this is to cause the launched program to be owned
and executable only by a special-purpose uid which issues the
.Nm
command.
.Sh DETAILS AND APPLICATION CONSIDERATIONS
A typical
.Nm
deployment looks like the diagram below:
.Bd -literal
         A       B                         C       D
        -->     -->                       -->     -->
      client    knc    ... network ...    knc    server
        <--     <--                       <--     <--
         E       F                         G       H
.Ed
.Pp
.Nm
makes no assumptions about the protocol running over its connection.
In order to appeal to the widest application and protocol audience,
.Nm
will attempt to mimick the behavior of TCP sockets insofar as it is possible.
.Pp
Sockets have a property that most other types of file descriptors do not:
they can be
.Em "half closed"
-- meaning closed in only one direction.  This
is accomplished in the BSD sockets API by calling
.Xr shutdown 2 .
.Nm
passes
.Dv EOF
indications on to the "opposite" side by way of this call.
For example, if the server exits, or closes the socket
.Em [D,H] ,
this produces
and
.Dv EOF
condition on
.Em G
.Po but not
.Em C
-- writes to
.Em C
will get
.Dv EPIPE
.Pc .
This causes the server side
.Nm
to pass this
.Dv EOF
condition on to
.Em F
by way of
.Xr shutdown 2 .
The
.Dv EOF
condition on
.Em F
is now passed to
.Em E
by way of the client
.Nm
calling
.Xr shutdown 2 .
This produces an
.Dv EOF
condition on
.Em E ,
which the client application should see and respond to appropriately
(perhaps by calling
.Xr close 2
on
.Em [A,E]
)
This close of
.Em [A,E]
produces an
.Dv EOF
in the client side knc on
.Em B ,
which in turn calls
.Xr shutdown 2 ,
producing an
.Dv EOF
on the server side
.Nm
on
.Em C .
At this point, the server side
.Nm
knows communication is not possible in either direction and exits.
Similarly for the client side
.Nm
.Pp
The astute reader will point out that
.Em [A,E]
is not a socket in the general case, and that
.Xr shutdown 2
fails on non-sockets.  This is why
.Nm
.Em actually
invokes an internal routine
.Fn shutdown_or_close
which handles the non-socket case appropriately.
.Sh EXAMPLE
A simple loopback test can be performed by invoking the server as:
.Bd -literal -offset indent
$ KRB5_KTNAME=/etc/krb5.keytab knc -l 12345 /bin/cat
.Ed
.Pp
Next, invoke the client as:
.Bd -literal -offset indent
$ knc host@host_on_which_server_is_running 12345
.Ed
.Pp
.Sh SEE ALSO
.Xr nc 1 ,
.Xr gssapi 3 ,
.Xr kerberos 8 .
